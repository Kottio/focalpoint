generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  username  String   @unique
  fullName  String?  @map("full_name")
  bio       String?
  avatarUrl String?  @map("avatar_url")

  // Relations
  spots         Spot[]
  photos        Photo[]
  votes         Vote[]
  sessions      Session[]
  accounts      Account[]
  verifications Verification[]

  @@map("users")
}

model Spot {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String
  description String?
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(11, 8)

  // Foreign Keys
  userId     Int? @map("user_id")
  categoryId Int  @map("category_id")

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  category Category  @relation(fields: [categoryId], references: [id])
  spotTags SpotTag[]
  photos   Photo[]
  votes    Vote[]

  @@map("spots")
}

model Category {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  name        String
  description String?
  icon        String?
  // Relations
  spots       Spot[]

  @@map("categories")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  color    String    @default("#3B82F6")
  // Relations
  spotTags SpotTag[]

  @@map("tags")
}

// Junction table for many-to-many relationship between Spots and Tags
model SpotTag {
  spotId Int  @map("spot_id")
  tagId  Int  @map("tag_id")
  // Relations
  spot   Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([spotId, tagId])
  @@map("spot_tags")
}

model Photo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  title       String?
  description String?
  isPrimary   Boolean @default(false) @map("is_primary")
  likes       Int     @default(0)

  // Urls
  originalUrl  String
  publicId     String
  thumbnailUrl String?
  mediumUrl    String?

  // Foreign Keys
  spotId Int @map("spot_id")
  userId Int @map("user_id")

  // Relations
  spot Spot  @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("photos")
}

// For future community features (upvotes/downvotes)
model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  voteType  VoteType @map("vote_type")

  // Foreign Keys
  spotId Int  @map("spot_id")
  userId Int? @map("user_id") // Make optional for deleted users

  // Relations
  spot Spot  @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Prevent duplicate votes from same user on same spot
  @@unique([spotId, userId])
  @@map("votes")
}

enum VoteType {
  UP
  DOWN
}

model Session {
  id     String @id @default(cuid())
  userId Int    @map("user_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  token         String    @unique
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  expiresAt     DateTime  @map("expires_at")
  idleExpiresAt DateTime? @map("idle_expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([expiresAt])
  @@index([idleExpiresAt])
  @@map("sessions")
}

model Account {
  id     String @id @default(cuid())
  userId Int    @map("user_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider          String
  providerAccountId String  @map("provider_account_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  idToken           String? @map("id_token")
  tokenType         String? @map("token_type")
  scope             String?
  sessionState      String? @map("session_state")

  email     String?
  username  String?
  name      String?
  avatarUrl String? @map("avatar_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Verification {
  id         String @id @default(cuid())
  identifier String
  value      String
  type       String
  userId     Int?   @map("user_id")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt  DateTime  @map("expires_at")
  consumedAt DateTime? @map("consumed_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([identifier])
  @@index([type])
  @@index([expiresAt])
  @@map("verifications")
}
